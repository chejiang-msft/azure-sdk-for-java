// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.iot.deviceupdate.generated;

import com.azure.core.util.polling.SyncPoller;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.iot.deviceupdate.DeviceUpdateClient;
import com.azure.iot.deviceupdate.DeviceUpdateClientBuilder;
import com.azure.iot.deviceupdate.models.FileImportMetadata;
import com.azure.iot.deviceupdate.models.ImportManifestMetadata;
import com.azure.iot.deviceupdate.models.ImportUpdateInputItem;
import com.azure.iot.deviceupdate.models.UpdateOperation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class DeviceUpdateImportUpdate {
    public static void main(String[] args) {
        DeviceUpdateClient deviceUpdateClient
            = new DeviceUpdateClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint("contoso.api.adu.microsoft.com").instanceId("blue").buildClient();
        // BEGIN:com.azure.iot.deviceupdate.generated.importupdate.deviceupdateimportupdate
        SyncPoller<UpdateOperation, UpdateOperation> response
            = deviceUpdateClient.beginImportUpdate(Arrays.asList(new ImportUpdateInputItem(new ImportManifestMetadata(
                "http://test.blob.core.windows.net/test/uploadimportMan.json", 816L,
                mapOf("sha256", "O19LyyncPe1AGstOdkcmozLV8pSbBdqrE18HdYVohRc="))).setFiles(Arrays.asList(
                    new FileImportMetadata("file1.bin", "http://test.blob.core.windows.net/test/upload1v5uww1q"),
                    new FileImportMetadata("file2.bin", "http://test.blob.core.windows.net/test/uploadkrmn5yw0"),
                    new FileImportMetadata("file3.bin", "http://test.blob.core.windows.net/test/uploaddq52ky5m")))));
        // END:com.azure.iot.deviceupdate.generated.importupdate.deviceupdateimportupdate
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
