// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.iot.deviceupdate.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncDefaultPollingStrategy;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.TypeReference;
import com.azure.iot.deviceupdate.DeviceUpdateServiceVersion;
import com.azure.iot.deviceupdate.models.DeviceOperation;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the DeviceManagementClient type.
 */
public final class DeviceManagementClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DeviceManagementClientService service;

    /**
     * The Device Update for IoT Hub account endpoint (hostname only, no protocol).
     */
    private final String endpoint;

    /**
     * Gets The Device Update for IoT Hub account endpoint (hostname only, no protocol).
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The Device Update for IoT Hub account instance identifier.
     */
    private final String instanceId;

    /**
     * Gets The Device Update for IoT Hub account instance identifier.
     * 
     * @return the instanceId value.
     */
    public String getInstanceId() {
        return this.instanceId;
    }

    /**
     * Service version.
     */
    private final DeviceUpdateServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public DeviceUpdateServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of DeviceManagementClient client.
     * 
     * @param endpoint The Device Update for IoT Hub account endpoint (hostname only, no protocol).
     * @param instanceId The Device Update for IoT Hub account instance identifier.
     * @param serviceVersion Service version.
     */
    public DeviceManagementClientImpl(String endpoint, String instanceId, DeviceUpdateServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, instanceId, serviceVersion);
    }

    /**
     * Initializes an instance of DeviceManagementClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint The Device Update for IoT Hub account endpoint (hostname only, no protocol).
     * @param instanceId The Device Update for IoT Hub account instance identifier.
     * @param serviceVersion Service version.
     */
    public DeviceManagementClientImpl(HttpPipeline httpPipeline, String endpoint, String instanceId,
        DeviceUpdateServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, instanceId, serviceVersion);
    }

    /**
     * Initializes an instance of DeviceManagementClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint The Device Update for IoT Hub account endpoint (hostname only, no protocol).
     * @param instanceId The Device Update for IoT Hub account instance identifier.
     * @param serviceVersion Service version.
     */
    public DeviceManagementClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        String instanceId, DeviceUpdateServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.instanceId = instanceId;
        this.serviceVersion = serviceVersion;
        this.service
            = RestProxy.create(DeviceManagementClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for DeviceManagementClient to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://{endpoint}/deviceUpdate/{instanceId}")
    @ServiceInterface(name = "DeviceManagementClie")
    public interface DeviceManagementClientService {
        @Get("/management/deviceClasses")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeviceClasses(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/deviceClasses")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeviceClassesSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/deviceClasses/{deviceClassId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeviceClass(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceClassId") String deviceClassId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/management/deviceClasses/{deviceClassId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeviceClassSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceClassId") String deviceClassId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Patch("/management/deviceClasses/{deviceClassId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateDeviceClass(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceClassId") String deviceClassId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/merge-patch+json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Patch("/management/deviceClasses/{deviceClassId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateDeviceClassSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceClassId") String deviceClassId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/merge-patch+json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Delete("/management/deviceClasses/{deviceClassId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeviceClass(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceClassId") String deviceClassId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/management/deviceClasses/{deviceClassId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteDeviceClassSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceClassId") String deviceClassId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/management/deviceClasses/{deviceClassId}/installableUpdates")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listInstallableUpdatesForDeviceClass(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceClassId") String deviceClassId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/management/deviceClasses/{deviceClassId}/installableUpdates")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listInstallableUpdatesForDeviceClassSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceClassId") String deviceClassId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/management/devices")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDevices(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/devices")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDevicesSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/management/devices:import")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> importDevices(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData importType,
            RequestOptions requestOptions, Context context);

        @Post("/management/devices:import")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> importDevicesSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData importType,
            RequestOptions requestOptions, Context context);

        @Get("/management/devices/{deviceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDevice(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceId") String deviceId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/devices/{deviceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeviceSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceId") String deviceId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/devices/{deviceId}/modules/{moduleId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeviceModule(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceId") String deviceId, @PathParam("moduleId") String moduleId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/devices/{deviceId}/modules/{moduleId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeviceModuleSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("deviceId") String deviceId, @PathParam("moduleId") String moduleId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/updateCompliance")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getUpdateCompliance(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/updateCompliance")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getUpdateComplianceSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listGroups(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listGroupsSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getGroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/groups/{groupId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getGroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/management/groups/{groupId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteGroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/management/groups/{groupId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteGroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/groups/{groupId}/updateCompliance")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getUpdateComplianceForGroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/groups/{groupId}/updateCompliance")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getUpdateComplianceForGroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/groups/{groupId}/bestUpdates")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listBestUpdatesForGroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/groups/{groupId}/bestUpdates")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listBestUpdatesForGroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/groups/{groupId}/deployments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeploymentsForGroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/groups/{groupId}/deployments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeploymentsForGroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/groups/{groupId}/deployments/{deploymentId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployment(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deploymentId") String deploymentId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deployments/{deploymentId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeploymentSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deploymentId") String deploymentId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/management/groups/{groupId}/deployments/{deploymentId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdateDeployment(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deploymentId") String deploymentId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Put("/management/groups/{groupId}/deployments/{deploymentId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateDeploymentSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deploymentId") String deploymentId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Delete("/management/groups/{groupId}/deployments/{deploymentId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeployment(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deploymentId") String deploymentId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/management/groups/{groupId}/deployments/{deploymentId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteDeploymentSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deploymentId") String deploymentId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deployments/{deploymentId}/status")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeploymentStatus(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deploymentId") String deploymentId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deployments/{deploymentId}/status")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeploymentStatusSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deploymentId") String deploymentId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeviceClassSubgroupsForGroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeviceClassSubgroupsForGroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeviceClassSubgroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeviceClassSubgroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeviceClassSubgroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteDeviceClassSubgroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/updateCompliance")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeviceClassSubgroupUpdateCompliance(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/updateCompliance")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeviceClassSubgroupUpdateComplianceSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/bestUpdates")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getBestUpdatesForDeviceClassSubgroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/bestUpdates")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getBestUpdatesForDeviceClassSubgroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeploymentsForDeviceClassSubgroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeploymentsForDeviceClassSubgroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeploymentForDeviceClassSubgroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @PathParam("deploymentId") String deploymentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeploymentForDeviceClassSubgroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @PathParam("deploymentId") String deploymentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeploymentForDeviceClassSubgroup(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @PathParam("deploymentId") String deploymentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteDeploymentForDeviceClassSubgroupSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @PathParam("deploymentId") String deploymentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}:cancel")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> stopDeployment(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @PathParam("deploymentId") String deploymentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}:cancel")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> stopDeploymentSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @PathParam("deploymentId") String deploymentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}:retry")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> retryDeployment(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @PathParam("deploymentId") String deploymentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}:retry")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> retryDeploymentSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @PathParam("deploymentId") String deploymentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}/status")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeviceClassSubgroupDeploymentStatus(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @PathParam("deploymentId") String deploymentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}/status")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeviceClassSubgroupDeploymentStatusSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("groupId") String groupId, @PathParam("deviceClassId") String deviceClassId,
            @PathParam("deploymentId") String deploymentId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}/devicestates")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeviceStatesForDeviceClassSubgroupDeployment(
            @HostParam("endpoint") String endpoint, @HostParam("instanceId") String instanceId,
            @QueryParam("api-version") String apiVersion, @PathParam("groupId") String groupId,
            @PathParam("deviceClassId") String deviceClassId, @PathParam("deploymentId") String deploymentId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}/devicestates")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeviceStatesForDeviceClassSubgroupDeploymentSync(
            @HostParam("endpoint") String endpoint, @HostParam("instanceId") String instanceId,
            @QueryParam("api-version") String apiVersion, @PathParam("groupId") String groupId,
            @PathParam("deviceClassId") String deviceClassId, @PathParam("deploymentId") String deploymentId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listOperationStatuses(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/operations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listOperationStatusesSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/deviceDiagnostics/logCollections")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listLogCollections(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/deviceDiagnostics/logCollections")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listLogCollectionsSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/deviceDiagnostics/logCollections/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLogCollection(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("operationId") String operationId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/management/deviceDiagnostics/logCollections/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLogCollectionSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("operationId") String operationId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/management/deviceDiagnostics/logCollections/{operationId}")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> startLogCollection(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("operationId") String operationId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData resource, RequestOptions requestOptions, Context context);

        @Put("/management/deviceDiagnostics/logCollections/{operationId}")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> startLogCollectionSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("operationId") String operationId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData resource, RequestOptions requestOptions, Context context);

        @Get("/management/deviceDiagnostics/logCollections/{operationId}/detailedStatus")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLogCollectionDetailedStatus(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("operationId") String operationId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/management/deviceDiagnostics/logCollections/{operationId}/detailedStatus")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLogCollectionDetailedStatusSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @PathParam("operationId") String operationId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/management/deviceDiagnostics/deviceHealth")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listHealthOfDevices(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/management/deviceDiagnostics/deviceHealth")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listHealthOfDevicesSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeviceClassesNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("instanceId") String instanceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeviceClassesNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("instanceId") String instanceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listInstallableUpdatesForDeviceClassNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listInstallableUpdatesForDeviceClassNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDevicesNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("instanceId") String instanceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDevicesNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("instanceId") String instanceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listGroupsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("instanceId") String instanceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listGroupsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("instanceId") String instanceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listBestUpdatesForGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listBestUpdatesForGroupNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeploymentsForGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeploymentsForGroupNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeviceClassSubgroupsForGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeviceClassSubgroupsForGroupNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeploymentsForDeviceClassSubgroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeploymentsForDeviceClassSubgroupNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeviceStatesForDeviceClassSubgroupDeploymentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeviceStatesForDeviceClassSubgroupDeploymentNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listOperationStatusesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listOperationStatusesNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listLogCollectionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listLogCollectionsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("instanceId") String instanceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listHealthOfDevicesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listHealthOfDevicesNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HostParam("instanceId") String instanceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Gets a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of device classes returned. You can filter on friendly name.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeviceClassesSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeviceClasses(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Gets a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of device classes returned. You can filter on friendly name.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeviceClassesAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listDeviceClassesSinglePageAsync(requestOptions),
            nextLink -> listDeviceClassesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of device classes returned. You can filter on friendly name.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeviceClassesSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeviceClassesSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Gets a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of device classes returned. You can filter on friendly name.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeviceClasses(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listDeviceClassesSinglePage(requestOptions),
            nextLink -> listDeviceClassesNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets the properties of a device class.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param deviceClassId The device class identifier. This is generated from the model Id and the compat
     * properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of a device class along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassWithResponseAsync(String deviceClassId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDeviceClass(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), deviceClassId, accept, requestOptions, context));
    }

    /**
     * Gets the properties of a device class.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param deviceClassId The device class identifier. This is generated from the model Id and the compat
     * properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of a device class along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeviceClassSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), deviceClassId, accept, requestOptions, Context.NONE);
    }

    /**
     * Update device class details.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param deviceClassId The device class identifier. This is generated from the model Id and the compat
     * properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateDeviceClassWithResponseAsync(String deviceClassId, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateDeviceClass(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), deviceClassId, contentType, accept, resource, requestOptions,
            context));
    }

    /**
     * Update device class details.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param deviceClassId The device class identifier. This is generated from the model Id and the compat
     * properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateDeviceClassWithResponse(String deviceClassId, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.updateDeviceClassSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), deviceClassId, contentType, accept, resource, requestOptions,
            Context.NONE);
    }

    /**
     * Deletes a device class. Device classes are created automatically when Device
     * Update-enabled devices are connected to the hub but are not automatically
     * cleaned up since they are referenced by DeviceClassSubgroups. If the user has
     * deleted all DeviceClassSubgroups for a device class they can also delete the
     * device class to remove the records from the system and to stop checking the
     * compatibility of this device class with new updates. If a device is ever
     * reconnected for this device class it will be re-created.
     * 
     * @param deviceClassId The device class identifier. This is generated from the model Id and the compat
     * properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeviceClassWithResponseAsync(String deviceClassId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteDeviceClass(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), deviceClassId, accept, requestOptions, context));
    }

    /**
     * Deletes a device class. Device classes are created automatically when Device
     * Update-enabled devices are connected to the hub but are not automatically
     * cleaned up since they are referenced by DeviceClassSubgroups. If the user has
     * deleted all DeviceClassSubgroups for a device class they can also delete the
     * device class to remove the records from the system and to stop checking the
     * compatibility of this device class with new updates. If a device is ever
     * reconnected for this device class it will be re-created.
     * 
     * @param deviceClassId The device class identifier. This is generated from the model Id and the compat
     * properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteDeviceClassSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), deviceClassId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets a list of installable updates for a device class.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     description: String (Optional)
     *     friendlyName: String (Optional)
     * }
     * }</pre>
     * 
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of installable updates for a device class along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listInstallableUpdatesForDeviceClassSinglePageAsync(String deviceClassId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listInstallableUpdatesForDeviceClass(this.getEndpoint(), this.getInstanceId(),
                    this.getServiceVersion().getVersion(), deviceClassId, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Gets a list of installable updates for a device class.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     description: String (Optional)
     *     friendlyName: String (Optional)
     * }
     * }</pre>
     * 
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of installable updates for a device class as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listInstallableUpdatesForDeviceClassAsync(String deviceClassId,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listInstallableUpdatesForDeviceClassSinglePageAsync(deviceClassId, requestOptions),
            nextLink -> listInstallableUpdatesForDeviceClassNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of installable updates for a device class.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     description: String (Optional)
     *     friendlyName: String (Optional)
     * }
     * }</pre>
     * 
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of installable updates for a device class along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listInstallableUpdatesForDeviceClassSinglePage(String deviceClassId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listInstallableUpdatesForDeviceClassSync(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), deviceClassId, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Gets a list of installable updates for a device class.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     description: String (Optional)
     *     friendlyName: String (Optional)
     * }
     * }</pre>
     * 
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of installable updates for a device class as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listInstallableUpdatesForDeviceClass(String deviceClassId,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listInstallableUpdatesForDeviceClassSinglePage(deviceClassId, requestOptions),
            nextLink -> listInstallableUpdatesForDeviceClassNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of devices returned. You can filter on GroupId,
     * DeviceClassId, or GroupId and DeploymentStatus. Use DeploymentStatus eq null to
     * query for devices with no deployment status (that have never been deployed to).</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices connected to Device Update for IoT Hub along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDevicesSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDevices(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of devices returned. You can filter on GroupId,
     * DeviceClassId, or GroupId and DeploymentStatus. Use DeploymentStatus eq null to
     * query for devices with no deployment status (that have never been deployed to).</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices connected to Device Update for IoT Hub as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDevicesAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listDevicesSinglePageAsync(requestOptions),
            nextLink -> listDevicesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of devices returned. You can filter on GroupId,
     * DeviceClassId, or GroupId and DeploymentStatus. Use DeploymentStatus eq null to
     * query for devices with no deployment status (that have never been deployed to).</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices connected to Device Update for IoT Hub along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDevicesSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDevicesSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of devices returned. You can filter on GroupId,
     * DeviceClassId, or GroupId and DeploymentStatus. Use DeploymentStatus eq null to
     * query for devices with no deployment status (that have never been deployed to).</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices connected to Device Update for IoT Hub as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDevices(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listDevicesSinglePage(requestOptions),
            nextLink -> listDevicesNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use
     * Operation-Location response header value to check for operation status.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     * 
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> importDevicesWithResponseAsync(BinaryData importType, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.importDevices(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), accept, importType, requestOptions, context));
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use
     * Operation-Location response header value to check for operation status.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     * 
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> importDevicesWithResponse(BinaryData importType, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.importDevicesSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), accept, importType, requestOptions, Context.NONE);
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use
     * Operation-Location response header value to check for operation status.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     * 
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginImportDevicesAsync(BinaryData importType,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.importDevicesWithResponseAsync(importType, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("https://{endpoint}/deviceUpdate/{instanceId}".replace("{endpoint}", this.getEndpoint())
                    .replace("{instanceId}", this.getInstanceId()))
                .setContext(requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use
     * Operation-Location response header value to check for operation status.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     * 
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginImportDevices(BinaryData importType, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.importDevicesWithResponse(importType, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("https://{endpoint}/deviceUpdate/{instanceId}".replace("{endpoint}", this.getEndpoint())
                    .replace("{instanceId}", this.getInstanceId()))
                .setContext(requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use
     * Operation-Location response header value to check for operation status.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     * 
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<DeviceOperation, DeviceOperation> beginImportDevicesWithModelAsync(BinaryData importType,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.importDevicesWithResponseAsync(importType, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("https://{endpoint}/deviceUpdate/{instanceId}".replace("{endpoint}", this.getEndpoint())
                    .replace("{instanceId}", this.getInstanceId()))
                .setContext(requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(DeviceOperation.class), TypeReference.createInstance(DeviceOperation.class));
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use
     * Operation-Location response header value to check for operation status.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     * 
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<DeviceOperation, DeviceOperation> beginImportDevicesWithModel(BinaryData importType,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.importDevicesWithResponse(importType, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())
                .setEndpoint("https://{endpoint}/deviceUpdate/{instanceId}".replace("{endpoint}", this.getEndpoint())
                    .replace("{instanceId}", this.getInstanceId()))
                .setContext(requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(DeviceOperation.class), TypeReference.createInstance(DeviceOperation.class));
    }

    /**
     * Gets the device properties and latest deployment status for a device connected
     * to Device Update for IoT Hub.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param deviceId Device identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device properties and latest deployment status for a device connected
     * to Device Update for IoT Hub along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceWithResponseAsync(String deviceId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDevice(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), deviceId, accept, requestOptions, context));
    }

    /**
     * Gets the device properties and latest deployment status for a device connected
     * to Device Update for IoT Hub.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param deviceId Device identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device properties and latest deployment status for a device connected
     * to Device Update for IoT Hub along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceWithResponse(String deviceId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeviceSync(this.getEndpoint(), this.getInstanceId(), this.getServiceVersion().getVersion(),
            deviceId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the device module properties and latest deployment status for a device
     * module connected to Device Update for IoT Hub.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param moduleId Device module identifier in Azure IoT Hub.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device module properties and latest deployment status for a device
     * module connected to Device Update for IoT Hub along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceModuleWithResponseAsync(String deviceId, String moduleId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDeviceModule(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), deviceId, moduleId, accept, requestOptions, context));
    }

    /**
     * Gets the device module properties and latest deployment status for a device
     * module connected to Device Update for IoT Hub.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param moduleId Device module identifier in Azure IoT Hub.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device module properties and latest deployment status for a device
     * module connected to Device Update for IoT Hub along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceModuleWithResponse(String deviceId, String moduleId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeviceModuleSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), deviceId, moduleId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the breakdown of how many devices are on their latest update, have new
     * updates available, or are in progress receiving new updates.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     totalDeviceCount: int (Required)
     *     onLatestUpdateDeviceCount: int (Required)
     *     newUpdatesAvailableDeviceCount: int (Required)
     *     updatesInProgressDeviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the breakdown of how many devices are on their latest update, have new
     * updates available, or are in progress receiving new updates along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUpdateComplianceWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getUpdateCompliance(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Gets the breakdown of how many devices are on their latest update, have new
     * updates available, or are in progress receiving new updates.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     totalDeviceCount: int (Required)
     *     onLatestUpdateDeviceCount: int (Required)
     *     newUpdatesAvailableDeviceCount: int (Required)
     *     updatesInProgressDeviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the breakdown of how many devices are on their latest update, have new
     * updates available, or are in progress receiving new updates along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getUpdateComplianceWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getUpdateComplianceSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of groups returned. You can order by groupId, deviceCount,
     * createdDate, subgroupsWithNewUpdatesAvailableCount,
     * subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     groupType: String(IoTHubTag/DefaultNoTag) (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     subgroupsWithNewUpdatesAvailableCount: Integer (Optional)
     *     subgroupsWithUpdatesInProgressCount: Integer (Optional)
     *     subgroupsWithOnLatestUpdateCount: Integer (Optional)
     *     deployments (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device groups along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listGroupsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listGroups(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of groups returned. You can order by groupId, deviceCount,
     * createdDate, subgroupsWithNewUpdatesAvailableCount,
     * subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     groupType: String(IoTHubTag/DefaultNoTag) (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     subgroupsWithNewUpdatesAvailableCount: Integer (Optional)
     *     subgroupsWithUpdatesInProgressCount: Integer (Optional)
     *     subgroupsWithOnLatestUpdateCount: Integer (Optional)
     *     deployments (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device groups as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listGroupsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listGroupsSinglePageAsync(requestOptions),
            nextLink -> listGroupsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of groups returned. You can order by groupId, deviceCount,
     * createdDate, subgroupsWithNewUpdatesAvailableCount,
     * subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     groupType: String(IoTHubTag/DefaultNoTag) (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     subgroupsWithNewUpdatesAvailableCount: Integer (Optional)
     *     subgroupsWithUpdatesInProgressCount: Integer (Optional)
     *     subgroupsWithOnLatestUpdateCount: Integer (Optional)
     *     deployments (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device groups along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listGroupsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listGroupsSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of groups returned. You can order by groupId, deviceCount,
     * createdDate, subgroupsWithNewUpdatesAvailableCount,
     * subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     groupType: String(IoTHubTag/DefaultNoTag) (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     subgroupsWithNewUpdatesAvailableCount: Integer (Optional)
     *     subgroupsWithUpdatesInProgressCount: Integer (Optional)
     *     subgroupsWithOnLatestUpdateCount: Integer (Optional)
     *     deployments (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device groups as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listGroups(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listGroupsSinglePage(requestOptions),
            nextLink -> listGroupsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets the device group properties.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     groupType: String(IoTHubTag/DefaultNoTag) (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     subgroupsWithNewUpdatesAvailableCount: Integer (Optional)
     *     subgroupsWithUpdatesInProgressCount: Integer (Optional)
     *     subgroupsWithOnLatestUpdateCount: Integer (Optional)
     *     deployments (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device group properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getGroupWithResponseAsync(String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getGroup(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, accept, requestOptions, context));
    }

    /**
     * Gets the device group properties.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     groupType: String(IoTHubTag/DefaultNoTag) (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     subgroupsWithNewUpdatesAvailableCount: Integer (Optional)
     *     subgroupsWithUpdatesInProgressCount: Integer (Optional)
     *     subgroupsWithOnLatestUpdateCount: Integer (Optional)
     *     deployments (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device group properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getGroupWithResponse(String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getGroupSync(this.getEndpoint(), this.getInstanceId(), this.getServiceVersion().getVersion(),
            groupId, accept, requestOptions, Context.NONE);
    }

    /**
     * Deletes a device group. This group is automatically created when a Device
     * Update-enabled device is connected to the hub and reports its properties.
     * Groups, subgroups, and deployments are not automatically cleaned up but are
     * retained for history purposes. Users can call this method to delete a group if
     * they do not need to retain any of the history of the group and no longer need
     * it. If a device is ever connected again for this group after the group was
     * deleted it will be automatically re-created but there will be no history.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteGroupWithResponseAsync(String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteGroup(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, accept, requestOptions, context));
    }

    /**
     * Deletes a device group. This group is automatically created when a Device
     * Update-enabled device is connected to the hub and reports its properties.
     * Groups, subgroups, and deployments are not automatically cleaned up but are
     * retained for history purposes. Users can call this method to delete a group if
     * they do not need to retain any of the history of the group and no longer need
     * it. If a device is ever connected again for this group after the group was
     * deleted it will be automatically re-created but there will be no history.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteGroupWithResponse(String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteGroupSync(this.getEndpoint(), this.getInstanceId(), this.getServiceVersion().getVersion(),
            groupId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get device group update compliance information such as how many devices are on
     * their latest update, how many need new updates, and how many are in progress on
     * receiving a new update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     totalDeviceCount: int (Required)
     *     onLatestUpdateDeviceCount: int (Required)
     *     newUpdatesAvailableDeviceCount: int (Required)
     *     updatesInProgressDeviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device group update compliance information such as how many devices are on
     * their latest update, how many need new updates, and how many are in progress on
     * receiving a new update along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUpdateComplianceForGroupWithResponseAsync(String groupId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getUpdateComplianceForGroup(this.getEndpoint(),
            this.getInstanceId(), this.getServiceVersion().getVersion(), groupId, accept, requestOptions, context));
    }

    /**
     * Get device group update compliance information such as how many devices are on
     * their latest update, how many need new updates, and how many are in progress on
     * receiving a new update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     totalDeviceCount: int (Required)
     *     onLatestUpdateDeviceCount: int (Required)
     *     newUpdatesAvailableDeviceCount: int (Required)
     *     updatesInProgressDeviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device group update compliance information such as how many devices are on
     * their latest update, how many need new updates, and how many are in progress on
     * receiving a new update along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getUpdateComplianceForGroupWithResponse(String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getUpdateComplianceForGroupSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the best available updates for a device group and a count of how many
     * devices need each update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available updates for a device group and a count of how many
     * devices need each update along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listBestUpdatesForGroupSinglePageAsync(String groupId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBestUpdatesForGroup(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), groupId, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the best available updates for a device group and a count of how many
     * devices need each update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available updates for a device group and a count of how many
     * devices need each update as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listBestUpdatesForGroupAsync(String groupId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listBestUpdatesForGroupSinglePageAsync(groupId, requestOptions),
            nextLink -> listBestUpdatesForGroupNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the best available updates for a device group and a count of how many
     * devices need each update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available updates for a device group and a count of how many
     * devices need each update along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listBestUpdatesForGroupSinglePage(String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listBestUpdatesForGroupSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the best available updates for a device group and a count of how many
     * devices need each update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available updates for a device group and a count of how many
     * devices need each update as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listBestUpdatesForGroup(String groupId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listBestUpdatesForGroupSinglePage(groupId, requestOptions),
            nextLink -> listBestUpdatesForGroupNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of deployments for a device group.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of deployments returned. You can order by start date.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device group along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeploymentsForGroupSinglePageAsync(String groupId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeploymentsForGroup(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), groupId, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Gets a list of deployments for a device group.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of deployments returned. You can order by start date.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeploymentsForGroupAsync(String groupId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listDeploymentsForGroupSinglePageAsync(groupId, requestOptions),
            nextLink -> listDeploymentsForGroupNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of deployments for a device group.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of deployments returned. You can order by start date.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device group along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeploymentsForGroupSinglePage(String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeploymentsForGroupSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Gets a list of deployments for a device group.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of deployments returned. You can order by start date.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeploymentsForGroup(String groupId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listDeploymentsForGroupSinglePage(groupId, requestOptions),
            nextLink -> listDeploymentsForGroupNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets the deployment properties.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentWithResponseAsync(String groupId, String deploymentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDeployment(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deploymentId, accept, requestOptions, context));
    }

    /**
     * Gets the deployment properties.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentWithResponse(String groupId, String deploymentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeploymentSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deploymentId, accept, requestOptions, Context.NONE);
    }

    /**
     * Creates or updates a deployment.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId Deployment identifier.
     * @param resource Deployment details.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateDeploymentWithResponseAsync(String groupId, String deploymentId,
        BinaryData resource, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createOrUpdateDeployment(this.getEndpoint(),
            this.getInstanceId(), this.getServiceVersion().getVersion(), groupId, deploymentId, accept, resource,
            requestOptions, context));
    }

    /**
     * Creates or updates a deployment.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId Deployment identifier.
     * @param resource Deployment details.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateDeploymentWithResponse(String groupId, String deploymentId,
        BinaryData resource, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createOrUpdateDeploymentSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deploymentId, accept, resource, requestOptions,
            Context.NONE);
    }

    /**
     * Deletes a deployment.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentWithResponseAsync(String groupId, String deploymentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteDeployment(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deploymentId, accept, requestOptions, context));
    }

    /**
     * Deletes a deployment.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeploymentWithResponse(String groupId, String deploymentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteDeploymentSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deploymentId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deploymentState: String(Active/ActiveWithSubgroupFailures/Failed/Inactive/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     subgroupStatus (Required): [
     *          (Required){
     *             groupId: String (Required)
     *             deviceClassId: String (Required)
     *             deploymentState: String(Active/Failed/Inactive/Canceled) (Required)
     *             error (Optional): (recursive schema, see error above)
     *             totalDevices: Integer (Optional)
     *             devicesInProgressCount: Integer (Optional)
     *             devicesCompletedFailedCount: Integer (Optional)
     *             devicesCompletedSucceededCount: Integer (Optional)
     *             devicesCanceledCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentStatusWithResponseAsync(String groupId, String deploymentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDeploymentStatus(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deploymentId, accept, requestOptions, context));
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deploymentState: String(Active/ActiveWithSubgroupFailures/Failed/Inactive/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     subgroupStatus (Required): [
     *          (Required){
     *             groupId: String (Required)
     *             deviceClassId: String (Required)
     *             deploymentState: String(Active/Failed/Inactive/Canceled) (Required)
     *             error (Optional): (recursive schema, see error above)
     *             totalDevices: Integer (Optional)
     *             devicesInProgressCount: Integer (Optional)
     *             devicesCompletedFailedCount: Integer (Optional)
     *             devicesCompletedSucceededCount: Integer (Optional)
     *             devicesCanceledCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentStatusWithResponse(String groupId, String deploymentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeploymentStatusSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deploymentId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the device class subgroups for the group. A device class subgroup is the
     * set of devices within the group that share the same device class. All devices
     * within the same device class are compatible with the same updates.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of device class subgroups returned. You can filter on compat
     * properties by name and value. (i.e. filter=compatProperties/propertyName1 eq 'value1'
     * and compatProperties/propertyName2 eq 'value2')</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     groupId: String (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     deploymentId: String (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device class subgroups for the group along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeviceClassSubgroupsForGroupSinglePageAsync(String groupId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeviceClassSubgroupsForGroup(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), groupId, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the device class subgroups for the group. A device class subgroup is the
     * set of devices within the group that share the same device class. All devices
     * within the same device class are compatible with the same updates.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of device class subgroups returned. You can filter on compat
     * properties by name and value. (i.e. filter=compatProperties/propertyName1 eq 'value1'
     * and compatProperties/propertyName2 eq 'value2')</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     groupId: String (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     deploymentId: String (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device class subgroups for the group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeviceClassSubgroupsForGroupAsync(String groupId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listDeviceClassSubgroupsForGroupSinglePageAsync(groupId, requestOptions),
            nextLink -> listDeviceClassSubgroupsForGroupNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the device class subgroups for the group. A device class subgroup is the
     * set of devices within the group that share the same device class. All devices
     * within the same device class are compatible with the same updates.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of device class subgroups returned. You can filter on compat
     * properties by name and value. (i.e. filter=compatProperties/propertyName1 eq 'value1'
     * and compatProperties/propertyName2 eq 'value2')</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     groupId: String (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     deploymentId: String (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device class subgroups for the group along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeviceClassSubgroupsForGroupSinglePage(String groupId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeviceClassSubgroupsForGroupSync(this.getEndpoint(),
            this.getInstanceId(), this.getServiceVersion().getVersion(), groupId, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the device class subgroups for the group. A device class subgroup is the
     * set of devices within the group that share the same device class. All devices
     * within the same device class are compatible with the same updates.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of device class subgroups returned. You can filter on compat
     * properties by name and value. (i.e. filter=compatProperties/propertyName1 eq 'value1'
     * and compatProperties/propertyName2 eq 'value2')</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     groupId: String (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     deploymentId: String (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device class subgroups for the group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeviceClassSubgroupsForGroup(String groupId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listDeviceClassSubgroupsForGroupSinglePage(groupId, requestOptions),
            nextLink -> listDeviceClassSubgroupsForGroupNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets device class subgroup details. A device class subgroup is the set of
     * devices within the group that share the same device class. All devices within
     * the same device class are compatible with the same updates.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     groupId: String (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     deploymentId: String (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupWithResponseAsync(String groupId, String deviceClassId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDeviceClassSubgroup(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, accept, requestOptions, context));
    }

    /**
     * Gets device class subgroup details. A device class subgroup is the set of
     * devices within the group that share the same device class. All devices within
     * the same device class are compatible with the same updates.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     groupId: String (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     deploymentId: String (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassSubgroupWithResponse(String groupId, String deviceClassId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeviceClassSubgroupSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, accept, requestOptions, Context.NONE);
    }

    /**
     * Deletes a device class subgroup. This subgroup is automatically created when a
     * Device Update-enabled device is connected to the hub and reports its
     * properties. Groups, subgroups, and deployments are not automatically cleaned up
     * but are retained for history purposes. Users can call this method to delete a
     * subgroup if they do not need to retain any of the history of the subgroup and
     * no longer need it. If a device is ever connected again for this subgroup after
     * the subgroup was deleted it will be automatically re-created but there will be
     * no history.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeviceClassSubgroupWithResponseAsync(String groupId, String deviceClassId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.deleteDeviceClassSubgroup(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), groupId, deviceClassId, accept, requestOptions, context));
    }

    /**
     * Deletes a device class subgroup. This subgroup is automatically created when a
     * Device Update-enabled device is connected to the hub and reports its
     * properties. Groups, subgroups, and deployments are not automatically cleaned up
     * but are retained for history purposes. Users can call this method to delete a
     * subgroup if they do not need to retain any of the history of the subgroup and
     * no longer need it. If a device is ever connected again for this subgroup after
     * the subgroup was deleted it will be automatically re-created but there will be
     * no history.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeviceClassSubgroupWithResponse(String groupId, String deviceClassId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteDeviceClassSubgroupSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get device class subgroup update compliance information such as how many
     * devices are on their latest update, how many need new updates, and how many are
     * in progress on receiving a new update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     totalDeviceCount: int (Required)
     *     onLatestUpdateDeviceCount: int (Required)
     *     newUpdatesAvailableDeviceCount: int (Required)
     *     updatesInProgressDeviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup update compliance information such as how many
     * devices are on their latest update, how many need new updates, and how many are
     * in progress on receiving a new update along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupUpdateComplianceWithResponseAsync(String groupId,
        String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getDeviceClassSubgroupUpdateCompliance(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), groupId, deviceClassId, accept, requestOptions, context));
    }

    /**
     * Get device class subgroup update compliance information such as how many
     * devices are on their latest update, how many need new updates, and how many are
     * in progress on receiving a new update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     totalDeviceCount: int (Required)
     *     onLatestUpdateDeviceCount: int (Required)
     *     newUpdatesAvailableDeviceCount: int (Required)
     *     updatesInProgressDeviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup update compliance information such as how many
     * devices are on their latest update, how many need new updates, and how many are
     * in progress on receiving a new update along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassSubgroupUpdateComplianceWithResponse(String groupId, String deviceClassId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeviceClassSubgroupUpdateComplianceSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the best available update for a device class subgroup and a count of how
     * many devices need this update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available update for a device class subgroup and a count of how
     * many devices need this update along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBestUpdatesForDeviceClassSubgroupWithResponseAsync(String groupId,
        String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getBestUpdatesForDeviceClassSubgroup(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), groupId, deviceClassId, accept, requestOptions, context));
    }

    /**
     * Get the best available update for a device class subgroup and a count of how
     * many devices need this update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available update for a device class subgroup and a count of how
     * many devices need this update along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getBestUpdatesForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getBestUpdatesForDeviceClassSubgroupSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of deployments returned. You can order by start date.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device class subgroup along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeploymentsForDeviceClassSubgroupSinglePageAsync(String groupId,
        String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listDeploymentsForDeviceClassSubgroup(this.getEndpoint(), this.getInstanceId(),
                    this.getServiceVersion().getVersion(), groupId, deviceClassId, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of deployments returned. You can order by start date.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device class subgroup as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeploymentsForDeviceClassSubgroupAsync(String groupId, String deviceClassId,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(
            () -> listDeploymentsForDeviceClassSubgroupSinglePageAsync(groupId, deviceClassId, requestOptions),
            nextLink -> listDeploymentsForDeviceClassSubgroupNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of deployments returned. You can order by start date.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device class subgroup along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeploymentsForDeviceClassSubgroupSinglePage(String groupId,
        String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listDeploymentsForDeviceClassSubgroupSync(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), groupId, deviceClassId, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of deployments returned. You can order by start date.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device class subgroup as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeploymentsForDeviceClassSubgroup(String groupId, String deviceClassId,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(
            () -> listDeploymentsForDeviceClassSubgroupSinglePage(groupId, deviceClassId, requestOptions),
            nextLink -> listDeploymentsForDeviceClassSubgroupNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets the deployment properties.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentForDeviceClassSubgroupWithResponseAsync(String groupId,
        String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDeploymentForDeviceClassSubgroup(this.getEndpoint(),
            this.getInstanceId(), this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId, accept,
            requestOptions, context));
    }

    /**
     * Gets the deployment properties.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId,
        String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeploymentForDeviceClassSubgroupSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Deletes a device class subgroup deployment.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentForDeviceClassSubgroupWithResponseAsync(String groupId,
        String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteDeploymentForDeviceClassSubgroup(this.getEndpoint(),
            this.getInstanceId(), this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId, accept,
            requestOptions, context));
    }

    /**
     * Deletes a device class subgroup deployment.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeploymentForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId,
        String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteDeploymentForDeviceClassSubgroupSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Stops a deployment.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deviceClass Subgroup Deployment metadata along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> stopDeploymentWithResponseAsync(String groupId, String deviceClassId,
        String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.stopDeployment(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId, accept, requestOptions,
            context));
    }

    /**
     * Stops a deployment.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deviceClass Subgroup Deployment metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> stopDeploymentWithResponse(String groupId, String deviceClassId, String deploymentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.stopDeploymentSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Retries a deployment with failed devices.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deviceClass Subgroup Deployment metadata along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retryDeploymentWithResponseAsync(String groupId, String deviceClassId,
        String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.retryDeployment(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId, accept, requestOptions,
            context));
    }

    /**
     * Retries a deployment with failed devices.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deviceClass Subgroup Deployment metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retryDeploymentWithResponse(String groupId, String deviceClassId, String deploymentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.retryDeploymentSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     deploymentState: String(Active/Failed/Inactive/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     totalDevices: Integer (Optional)
     *     devicesInProgressCount: Integer (Optional)
     *     devicesCompletedFailedCount: Integer (Optional)
     *     devicesCompletedSucceededCount: Integer (Optional)
     *     devicesCanceledCount: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupDeploymentStatusWithResponseAsync(String groupId,
        String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDeviceClassSubgroupDeploymentStatus(this.getEndpoint(),
            this.getInstanceId(), this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId, accept,
            requestOptions, context));
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     deploymentState: String(Active/Failed/Inactive/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     totalDevices: Integer (Optional)
     *     devicesInProgressCount: Integer (Optional)
     *     devicesCompletedFailedCount: Integer (Optional)
     *     devicesCompletedSucceededCount: Integer (Optional)
     *     devicesCanceledCount: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassSubgroupDeploymentStatusWithResponse(String groupId, String deviceClassId,
        String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeviceClassSubgroupDeploymentStatusSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for
     * getting a list of failed devices.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of deployment device states returned. You can filter on
     * deviceId and moduleId and/or deviceState.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     retryCount: int (Required)
     *     movedOnToNewDeployment: boolean (Required)
     *     deviceState: String(Succeeded/InProgress/Canceled/Failed) (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeviceStatesForDeviceClassSubgroupDeploymentSinglePageAsync(
        String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeviceStatesForDeviceClassSubgroupDeployment(this.getEndpoint(),
                this.getInstanceId(), this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId,
                accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for
     * getting a list of failed devices.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of deployment device states returned. You can filter on
     * deviceId and moduleId and/or deviceState.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     retryCount: int (Required)
     *     movedOnToNewDeployment: boolean (Required)
     *     deviceState: String(Succeeded/InProgress/Canceled/Failed) (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeviceStatesForDeviceClassSubgroupDeploymentAsync(String groupId,
        String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(
            () -> listDeviceStatesForDeviceClassSubgroupDeploymentSinglePageAsync(groupId, deviceClassId, deploymentId,
                requestOptions),
            nextLink -> listDeviceStatesForDeviceClassSubgroupDeploymentNextSinglePageAsync(nextLink,
                requestOptionsForNextPage));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for
     * getting a list of failed devices.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of deployment device states returned. You can filter on
     * deviceId and moduleId and/or deviceState.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     retryCount: int (Required)
     *     movedOnToNewDeployment: boolean (Required)
     *     deviceState: String(Succeeded/InProgress/Canceled/Failed) (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeviceStatesForDeviceClassSubgroupDeploymentSinglePage(String groupId,
        String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeviceStatesForDeviceClassSubgroupDeploymentSync(this.getEndpoint(),
            this.getInstanceId(), this.getServiceVersion().getVersion(), groupId, deviceClassId, deploymentId, accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for
     * getting a list of failed devices.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of deployment device states returned. You can filter on
     * deviceId and moduleId and/or deviceState.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     retryCount: int (Required)
     *     movedOnToNewDeployment: boolean (Required)
     *     deviceState: String(Succeeded/InProgress/Canceled/Failed) (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeviceStatesForDeviceClassSubgroupDeployment(String groupId,
        String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(
            () -> listDeviceStatesForDeviceClassSubgroupDeploymentSinglePage(groupId, deviceClassId, deploymentId,
                requestOptions),
            nextLink -> listDeviceStatesForDeviceClassSubgroupDeploymentNextSinglePage(nextLink,
                requestOptionsForNextPage));
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of operations returned. Only one specific filter is supported: \"status eq 'NotStarted' or
     * status eq 'Running'\"</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>Specifies a non-negative integer n that limits the number of items returned
     * from a collection. The service returns the number of available items up to but
     * not greater than the specified value n.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     traceId: String (Optional)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     etag: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device import operations along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listOperationStatusesSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listOperationStatuses(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of operations returned. Only one specific filter is supported: \"status eq 'NotStarted' or
     * status eq 'Running'\"</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>Specifies a non-negative integer n that limits the number of items returned
     * from a collection. The service returns the number of available items up to but
     * not greater than the specified value n.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     traceId: String (Optional)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     etag: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device import operations as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listOperationStatusesAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listOperationStatusesSinglePageAsync(requestOptions),
            nextLink -> listOperationStatusesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of operations returned. Only one specific filter is supported: \"status eq 'NotStarted' or
     * status eq 'Running'\"</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>Specifies a non-negative integer n that limits the number of items returned
     * from a collection. The service returns the number of available items up to but
     * not greater than the specified value n.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     traceId: String (Optional)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     etag: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device import operations along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listOperationStatusesSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listOperationStatusesSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of operations returned. Only one specific filter is supported: \"status eq 'NotStarted' or
     * status eq 'Running'\"</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>Specifies a non-negative integer n that limits the number of items returned
     * from a collection. The service returns the number of available items up to but
     * not greater than the specified value n.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     traceId: String (Optional)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     etag: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device import operations as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listOperationStatuses(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listOperationStatusesSinglePage(requestOptions),
            nextLink -> listOperationStatusesNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get all device diagnostics log collections.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all device diagnostics log collections along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listLogCollectionsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listLogCollections(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get all device diagnostics log collections.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all device diagnostics log collections as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listLogCollectionsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listLogCollectionsSinglePageAsync(requestOptions),
            nextLink -> listLogCollectionsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get all device diagnostics log collections.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all device diagnostics log collections along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listLogCollectionsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listLogCollectionsSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get all device diagnostics log collections.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all device diagnostics log collections as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listLogCollections(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listLogCollectionsSinglePage(requestOptions),
            nextLink -> listLogCollectionsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the device diagnostics log collection.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param operationId The log collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device diagnostics log collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLogCollectionWithResponseAsync(String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getLogCollection(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), operationId, accept, requestOptions, context));
    }

    /**
     * Get the device diagnostics log collection.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param operationId The log collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device diagnostics log collection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLogCollectionWithResponse(String operationId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLogCollectionSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), operationId, accept, requestOptions, Context.NONE);
    }

    /**
     * Start the device diagnostics log collection on specified devices.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param operationId The log collection id.
     * @param resource Log collection details.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return diagnostics request body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> startLogCollectionWithResponseAsync(String operationId, BinaryData resource,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.startLogCollection(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), operationId, accept, resource, requestOptions, context));
    }

    /**
     * Start the device diagnostics log collection on specified devices.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param operationId The log collection id.
     * @param resource Log collection details.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return diagnostics request body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> startLogCollectionWithResponse(String operationId, BinaryData resource,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.startLogCollectionSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), operationId, accept, resource, requestOptions, Context.NONE);
    }

    /**
     * Get log collection with detailed status.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     deviceStatus (Optional): [
     *          (Optional){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *             status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *             resultCode: String (Optional)
     *             extendedResultCode: String (Optional)
     *             logLocation: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     * }
     * }</pre>
     * 
     * @param operationId The log collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return log collection with detailed status along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLogCollectionDetailedStatusWithResponseAsync(String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getLogCollectionDetailedStatus(this.getEndpoint(),
            this.getInstanceId(), this.getServiceVersion().getVersion(), operationId, accept, requestOptions, context));
    }

    /**
     * Get log collection with detailed status.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     deviceStatus (Optional): [
     *          (Optional){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *             status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *             resultCode: String (Optional)
     *             extendedResultCode: String (Optional)
     *             logLocation: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     * }
     * }</pre>
     * 
     * @param operationId The log collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return log collection with detailed status along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLogCollectionDetailedStatusWithResponse(String operationId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLogCollectionDetailedStatusSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), operationId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get list of device health.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of devices for which device health is returned. You can
     * filter on status, device id and module id.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     state: String(healthy/unhealthy) (Required)
     *     digitalTwinModelId: String (Optional)
     *     healthChecks (Required): [
     *          (Required){
     *             name: String (Optional)
     *             result: String(success/userError) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of device health along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listHealthOfDevicesSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listHealthOfDevices(this.getEndpoint(), this.getInstanceId(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get list of device health.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of devices for which device health is returned. You can
     * filter on status, device id and module id.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     state: String(healthy/unhealthy) (Required)
     *     digitalTwinModelId: String (Optional)
     *     healthChecks (Required): [
     *          (Required){
     *             name: String (Optional)
     *             result: String(success/userError) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of device health as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listHealthOfDevicesAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listHealthOfDevicesSinglePageAsync(requestOptions),
            nextLink -> listHealthOfDevicesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get list of device health.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of devices for which device health is returned. You can
     * filter on status, device id and module id.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     state: String(healthy/unhealthy) (Required)
     *     digitalTwinModelId: String (Optional)
     *     healthChecks (Required): [
     *          (Required){
     *             name: String (Optional)
     *             result: String(success/userError) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of device health along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listHealthOfDevicesSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listHealthOfDevicesSync(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get list of device health.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of devices for which device health is returned. You can
     * filter on status, device id and module id.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     state: String(healthy/unhealthy) (Required)
     *     digitalTwinModelId: String (Optional)
     *     healthChecks (Required): [
     *          (Required){
     *             name: String (Optional)
     *             result: String(success/userError) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of device health as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listHealthOfDevices(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listHealthOfDevicesSinglePage(requestOptions),
            nextLink -> listHealthOfDevicesNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeviceClass items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeviceClassesNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeviceClassesNext(nextLink, this.getEndpoint(), this.getInstanceId(),
                accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeviceClass items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeviceClassesNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeviceClassesNextSync(nextLink, this.getEndpoint(), this.getInstanceId(),
            accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     description: String (Optional)
     *     friendlyName: String (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of update information along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listInstallableUpdatesForDeviceClassNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listInstallableUpdatesForDeviceClassNext(nextLink, this.getEndpoint(),
                this.getInstanceId(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     description: String (Optional)
     *     friendlyName: String (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of update information along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listInstallableUpdatesForDeviceClassNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listInstallableUpdatesForDeviceClassNextSync(nextLink, this.getEndpoint(),
            this.getInstanceId(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Device items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDevicesNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDevicesNext(nextLink, this.getEndpoint(), this.getInstanceId(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Device items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDevicesNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDevicesNextSync(nextLink, this.getEndpoint(), this.getInstanceId(),
            accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     groupType: String(IoTHubTag/DefaultNoTag) (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     subgroupsWithNewUpdatesAvailableCount: Integer (Optional)
     *     subgroupsWithUpdatesInProgressCount: Integer (Optional)
     *     subgroupsWithOnLatestUpdateCount: Integer (Optional)
     *     deployments (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Group items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listGroupsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listGroupsNext(nextLink, this.getEndpoint(), this.getInstanceId(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     groupType: String(IoTHubTag/DefaultNoTag) (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     subgroupsWithNewUpdatesAvailableCount: Integer (Optional)
     *     subgroupsWithUpdatesInProgressCount: Integer (Optional)
     *     subgroupsWithOnLatestUpdateCount: Integer (Optional)
     *     deployments (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Group items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listGroupsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listGroupsNextSync(nextLink, this.getEndpoint(), this.getInstanceId(),
            accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of updatable devices for a device class subgroup along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listBestUpdatesForGroupNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBestUpdatesForGroupNext(nextLink, this.getEndpoint(),
                this.getInstanceId(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of updatable devices for a device class subgroup along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listBestUpdatesForGroupNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listBestUpdatesForGroupNextSync(nextLink, this.getEndpoint(),
            this.getInstanceId(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Deployment items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeploymentsForGroupNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeploymentsForGroupNext(nextLink, this.getEndpoint(),
                this.getInstanceId(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Deployment items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeploymentsForGroupNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeploymentsForGroupNextSync(nextLink, this.getEndpoint(),
            this.getInstanceId(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     groupId: String (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     deploymentId: String (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeviceClassSubgroup items along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeviceClassSubgroupsForGroupNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeviceClassSubgroupsForGroupNext(nextLink, this.getEndpoint(),
                this.getInstanceId(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     groupId: String (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     deploymentId: String (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeviceClassSubgroup items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeviceClassSubgroupsForGroupNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeviceClassSubgroupsForGroupNextSync(nextLink, this.getEndpoint(),
            this.getInstanceId(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeviceClassSubgroupDeployment items along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeploymentsForDeviceClassSubgroupNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeploymentsForDeviceClassSubgroupNext(nextLink, this.getEndpoint(),
                this.getInstanceId(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeviceClassSubgroupDeployment items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeploymentsForDeviceClassSubgroupNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeploymentsForDeviceClassSubgroupNextSync(nextLink, this.getEndpoint(),
            this.getInstanceId(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     retryCount: int (Required)
     *     movedOnToNewDeployment: boolean (Required)
     *     deviceState: String(Succeeded/InProgress/Canceled/Failed) (Required)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeploymentDeviceState items along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeviceStatesForDeviceClassSubgroupDeploymentNextSinglePageAsync(
        String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeviceStatesForDeviceClassSubgroupDeploymentNext(nextLink,
                this.getEndpoint(), this.getInstanceId(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     retryCount: int (Required)
     *     movedOnToNewDeployment: boolean (Required)
     *     deviceState: String(Succeeded/InProgress/Canceled/Failed) (Required)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeploymentDeviceState items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeviceStatesForDeviceClassSubgroupDeploymentNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeviceStatesForDeviceClassSubgroupDeploymentNextSync(nextLink,
            this.getEndpoint(), this.getInstanceId(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     traceId: String (Optional)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     etag: String (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeviceOperation items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listOperationStatusesNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listOperationStatusesNext(nextLink, this.getEndpoint(),
                this.getInstanceId(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     traceId: String (Optional)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     etag: String (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeviceOperation items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listOperationStatusesNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listOperationStatusesNextSync(nextLink, this.getEndpoint(),
            this.getInstanceId(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of LogCollection items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listLogCollectionsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listLogCollectionsNext(nextLink, this.getEndpoint(), this.getInstanceId(),
                accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of LogCollection items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listLogCollectionsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listLogCollectionsNextSync(nextLink, this.getEndpoint(),
            this.getInstanceId(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     state: String(healthy/unhealthy) (Required)
     *     digitalTwinModelId: String (Optional)
     *     healthChecks (Required): [
     *          (Required){
     *             name: String (Optional)
     *             result: String(success/userError) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeviceHealth items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listHealthOfDevicesNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listHealthOfDevicesNext(nextLink, this.getEndpoint(), this.getInstanceId(),
                accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     state: String(healthy/unhealthy) (Required)
     *     digitalTwinModelId: String (Optional)
     *     healthChecks (Required): [
     *          (Required){
     *             name: String (Optional)
     *             result: String(success/userError) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeviceHealth items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listHealthOfDevicesNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listHealthOfDevicesNextSync(nextLink, this.getEndpoint(),
            this.getInstanceId(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
