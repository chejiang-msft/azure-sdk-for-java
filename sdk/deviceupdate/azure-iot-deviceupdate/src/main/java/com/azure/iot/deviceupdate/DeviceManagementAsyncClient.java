// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.iot.deviceupdate;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.iot.deviceupdate.implementation.DeviceManagementClientImpl;
import com.azure.iot.deviceupdate.models.Deployment;
import com.azure.iot.deviceupdate.models.DeploymentDeviceState;
import com.azure.iot.deviceupdate.models.DeploymentStatus;
import com.azure.iot.deviceupdate.models.Device;
import com.azure.iot.deviceupdate.models.DeviceClass;
import com.azure.iot.deviceupdate.models.DeviceClassSubgroup;
import com.azure.iot.deviceupdate.models.DeviceClassSubgroupDeployment;
import com.azure.iot.deviceupdate.models.DeviceClassSubgroupDeploymentStatus;
import com.azure.iot.deviceupdate.models.DeviceClassSubgroupUpdatableDevices;
import com.azure.iot.deviceupdate.models.DeviceHealth;
import com.azure.iot.deviceupdate.models.DeviceOperation;
import com.azure.iot.deviceupdate.models.Group;
import com.azure.iot.deviceupdate.models.ImportType;
import com.azure.iot.deviceupdate.models.LogCollection;
import com.azure.iot.deviceupdate.models.LogCollectionOperationDetailedStatus;
import com.azure.iot.deviceupdate.models.UpdateCompliance;
import com.azure.iot.deviceupdate.models.UpdateInfo;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous DeviceManagementClient type.
 */
@ServiceClient(builder = DeviceManagementClientBuilder.class, isAsync = true)
public final class DeviceManagementAsyncClient {
    @Generated
    private final DeviceManagementClientImpl serviceClient;

    /**
     * Initializes an instance of DeviceManagementAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    DeviceManagementAsyncClient(DeviceManagementClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of device classes returned. You can filter on friendly name.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeviceClasses(RequestOptions requestOptions) {
        return this.serviceClient.listDeviceClassesAsync(requestOptions);
    }

    /**
     * Gets the properties of a device class.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param deviceClassId The device class identifier. This is generated from the model Id and the compat
     * properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of a device class along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions) {
        return this.serviceClient.getDeviceClassWithResponseAsync(deviceClassId, requestOptions);
    }

    /**
     * Update device class details.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     friendlyName: String (Optional)
     *     deviceClassProperties (Required): {
     *         contractModel (Optional): {
     *             id: String (Required)
     *             name: String (Required)
     *         }
     *         compatProperties (Required): {
     *             String: String (Required)
     *         }
     *     }
     *     bestCompatibleUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param deviceClassId The device class identifier. This is generated from the model Id and the compat
     * properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateDeviceClassWithResponse(String deviceClassId, BinaryData resource,
        RequestOptions requestOptions) {
        // Convenience API is not generated, as operation 'updateDeviceClass' is 'application/merge-patch+json'
        return this.serviceClient.updateDeviceClassWithResponseAsync(deviceClassId, resource, requestOptions);
    }

    /**
     * Deletes a device class. Device classes are created automatically when Device
     * Update-enabled devices are connected to the hub but are not automatically
     * cleaned up since they are referenced by DeviceClassSubgroups. If the user has
     * deleted all DeviceClassSubgroups for a device class they can also delete the
     * device class to remove the records from the system and to stop checking the
     * compatibility of this device class with new updates. If a device is ever
     * reconnected for this device class it will be re-created.
     * 
     * @param deviceClassId The device class identifier. This is generated from the model Id and the compat
     * properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions) {
        return this.serviceClient.deleteDeviceClassWithResponseAsync(deviceClassId, requestOptions);
    }

    /**
     * Gets a list of installable updates for a device class.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     updateId (Required): {
     *         provider: String (Required)
     *         name: String (Required)
     *         version: String (Required)
     *     }
     *     description: String (Optional)
     *     friendlyName: String (Optional)
     * }
     * }</pre>
     * 
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of installable updates for a device class as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listInstallableUpdatesForDeviceClass(String deviceClassId,
        RequestOptions requestOptions) {
        return this.serviceClient.listInstallableUpdatesForDeviceClassAsync(deviceClassId, requestOptions);
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of devices returned. You can filter on GroupId,
     * DeviceClassId, or GroupId and DeploymentStatus. Use DeploymentStatus eq null to
     * query for devices with no deployment status (that have never been deployed to).</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices connected to Device Update for IoT Hub as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDevices(RequestOptions requestOptions) {
        return this.serviceClient.listDevicesAsync(requestOptions);
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use
     * Operation-Location response header value to check for operation status.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     * 
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginImportDevices(BinaryData importType, RequestOptions requestOptions) {
        return this.serviceClient.beginImportDevicesAsync(importType, requestOptions);
    }

    /**
     * Gets the device properties and latest deployment status for a device connected
     * to Device Update for IoT Hub.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param deviceId Device identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device properties and latest deployment status for a device connected
     * to Device Update for IoT Hub along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceWithResponse(String deviceId, RequestOptions requestOptions) {
        return this.serviceClient.getDeviceWithResponseAsync(deviceId, requestOptions);
    }

    /**
     * Gets the device module properties and latest deployment status for a device
     * module connected to Device Update for IoT Hub.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     deviceClassId: String (Required)
     *     groupId: String (Optional)
     *     lastAttemptedUpdate (Optional): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)
     *     installedUpdate (Optional): (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean (Required)
     *     lastDeploymentId: String (Optional)
     *     lastInstallResult (Optional): {
     *         resultCode: int (Required)
     *         extendedResultCode: int (Required)
     *         resultDetails: String (Optional)
     *         stepResults (Optional): [
     *              (Optional){
     *                 update (Optional): (recursive schema, see update above)
     *                 description: String (Optional)
     *                 resultCode: int (Required)
     *                 extendedResultCode: int (Required)
     *                 resultDetails: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param moduleId Device module identifier in Azure IoT Hub.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device module properties and latest deployment status for a device
     * module connected to Device Update for IoT Hub along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceModuleWithResponse(String deviceId, String moduleId,
        RequestOptions requestOptions) {
        return this.serviceClient.getDeviceModuleWithResponseAsync(deviceId, moduleId, requestOptions);
    }

    /**
     * Gets the breakdown of how many devices are on their latest update, have new
     * updates available, or are in progress receiving new updates.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     totalDeviceCount: int (Required)
     *     onLatestUpdateDeviceCount: int (Required)
     *     newUpdatesAvailableDeviceCount: int (Required)
     *     updatesInProgressDeviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the breakdown of how many devices are on their latest update, have new
     * updates available, or are in progress receiving new updates along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUpdateComplianceWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getUpdateComplianceWithResponseAsync(requestOptions);
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of groups returned. You can order by groupId, deviceCount,
     * createdDate, subgroupsWithNewUpdatesAvailableCount,
     * subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     groupType: String(IoTHubTag/DefaultNoTag) (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     subgroupsWithNewUpdatesAvailableCount: Integer (Optional)
     *     subgroupsWithUpdatesInProgressCount: Integer (Optional)
     *     subgroupsWithOnLatestUpdateCount: Integer (Optional)
     *     deployments (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device groups as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listGroups(RequestOptions requestOptions) {
        return this.serviceClient.listGroupsAsync(requestOptions);
    }

    /**
     * Gets the device group properties.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     groupType: String(IoTHubTag/DefaultNoTag) (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     subgroupsWithNewUpdatesAvailableCount: Integer (Optional)
     *     subgroupsWithUpdatesInProgressCount: Integer (Optional)
     *     subgroupsWithOnLatestUpdateCount: Integer (Optional)
     *     deployments (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device group properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getGroupWithResponse(String groupId, RequestOptions requestOptions) {
        return this.serviceClient.getGroupWithResponseAsync(groupId, requestOptions);
    }

    /**
     * Deletes a device group. This group is automatically created when a Device
     * Update-enabled device is connected to the hub and reports its properties.
     * Groups, subgroups, and deployments are not automatically cleaned up but are
     * retained for history purposes. Users can call this method to delete a group if
     * they do not need to retain any of the history of the group and no longer need
     * it. If a device is ever connected again for this group after the group was
     * deleted it will be automatically re-created but there will be no history.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteGroupWithResponse(String groupId, RequestOptions requestOptions) {
        return this.serviceClient.deleteGroupWithResponseAsync(groupId, requestOptions);
    }

    /**
     * Get device group update compliance information such as how many devices are on
     * their latest update, how many need new updates, and how many are in progress on
     * receiving a new update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     totalDeviceCount: int (Required)
     *     onLatestUpdateDeviceCount: int (Required)
     *     newUpdatesAvailableDeviceCount: int (Required)
     *     updatesInProgressDeviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device group update compliance information such as how many devices are on
     * their latest update, how many need new updates, and how many are in progress on
     * receiving a new update along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUpdateComplianceForGroupWithResponse(String groupId,
        RequestOptions requestOptions) {
        return this.serviceClient.getUpdateComplianceForGroupWithResponseAsync(groupId, requestOptions);
    }

    /**
     * Get the best available updates for a device group and a count of how many
     * devices need each update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available updates for a device group and a count of how many
     * devices need each update as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listBestUpdatesForGroup(String groupId, RequestOptions requestOptions) {
        return this.serviceClient.listBestUpdatesForGroupAsync(groupId, requestOptions);
    }

    /**
     * Gets a list of deployments for a device group.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of deployments returned. You can order by start date.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device group as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeploymentsForGroup(String groupId, RequestOptions requestOptions) {
        return this.serviceClient.listDeploymentsForGroupAsync(groupId, requestOptions);
    }

    /**
     * Gets the deployment properties.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentWithResponse(String groupId, String deploymentId,
        RequestOptions requestOptions) {
        return this.serviceClient.getDeploymentWithResponseAsync(groupId, deploymentId, requestOptions);
    }

    /**
     * Creates or updates a deployment.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId Deployment identifier.
     * @param resource Deployment details.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateDeploymentWithResponse(String groupId, String deploymentId,
        BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateDeploymentWithResponseAsync(groupId, deploymentId, resource,
            requestOptions);
    }

    /**
     * Deletes a deployment.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentWithResponse(String groupId, String deploymentId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteDeploymentWithResponseAsync(groupId, deploymentId, requestOptions);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deploymentState: String(Active/ActiveWithSubgroupFailures/Failed/Inactive/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     subgroupStatus (Required): [
     *          (Required){
     *             groupId: String (Required)
     *             deviceClassId: String (Required)
     *             deploymentState: String(Active/Failed/Inactive/Canceled) (Required)
     *             error (Optional): (recursive schema, see error above)
     *             totalDevices: Integer (Optional)
     *             devicesInProgressCount: Integer (Optional)
     *             devicesCompletedFailedCount: Integer (Optional)
     *             devicesCompletedSucceededCount: Integer (Optional)
     *             devicesCanceledCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentStatusWithResponse(String groupId, String deploymentId,
        RequestOptions requestOptions) {
        return this.serviceClient.getDeploymentStatusWithResponseAsync(groupId, deploymentId, requestOptions);
    }

    /**
     * Get the device class subgroups for the group. A device class subgroup is the
     * set of devices within the group that share the same device class. All devices
     * within the same device class are compatible with the same updates.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of device class subgroups returned. You can filter on compat
     * properties by name and value. (i.e. filter=compatProperties/propertyName1 eq 'value1'
     * and compatProperties/propertyName2 eq 'value2')</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     groupId: String (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     deploymentId: String (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device class subgroups for the group as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeviceClassSubgroupsForGroup(String groupId, RequestOptions requestOptions) {
        return this.serviceClient.listDeviceClassSubgroupsForGroupAsync(groupId, requestOptions);
    }

    /**
     * Gets device class subgroup details. A device class subgroup is the set of
     * devices within the group that share the same device class. All devices within
     * the same device class are compatible with the same updates.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceClassId: String (Required)
     *     groupId: String (Required)
     *     createdDateTime: String (Required)
     *     deviceCount: Integer (Optional)
     *     deploymentId: String (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup details along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupWithResponse(String groupId, String deviceClassId,
        RequestOptions requestOptions) {
        return this.serviceClient.getDeviceClassSubgroupWithResponseAsync(groupId, deviceClassId, requestOptions);
    }

    /**
     * Deletes a device class subgroup. This subgroup is automatically created when a
     * Device Update-enabled device is connected to the hub and reports its
     * properties. Groups, subgroups, and deployments are not automatically cleaned up
     * but are retained for history purposes. Users can call this method to delete a
     * subgroup if they do not need to retain any of the history of the subgroup and
     * no longer need it. If a device is ever connected again for this subgroup after
     * the subgroup was deleted it will be automatically re-created but there will be
     * no history.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeviceClassSubgroupWithResponse(String groupId, String deviceClassId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteDeviceClassSubgroupWithResponseAsync(groupId, deviceClassId, requestOptions);
    }

    /**
     * Get device class subgroup update compliance information such as how many
     * devices are on their latest update, how many need new updates, and how many are
     * in progress on receiving a new update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     totalDeviceCount: int (Required)
     *     onLatestUpdateDeviceCount: int (Required)
     *     newUpdatesAvailableDeviceCount: int (Required)
     *     updatesInProgressDeviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup update compliance information such as how many
     * devices are on their latest update, how many need new updates, and how many are
     * in progress on receiving a new update along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupUpdateComplianceWithResponse(String groupId,
        String deviceClassId, RequestOptions requestOptions) {
        return this.serviceClient.getDeviceClassSubgroupUpdateComplianceWithResponseAsync(groupId, deviceClassId,
            requestOptions);
    }

    /**
     * Get the best available update for a device class subgroup and a count of how
     * many devices need this update.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     deviceCount: int (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available update for a device class subgroup and a count of how
     * many devices need this update along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBestUpdatesForDeviceClassSubgroupWithResponse(String groupId,
        String deviceClassId, RequestOptions requestOptions) {
        return this.serviceClient.getBestUpdatesForDeviceClassSubgroupWithResponseAsync(groupId, deviceClassId,
            requestOptions);
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>orderby</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Orders the set of deployments returned. You can order by start date.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device class subgroup as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeploymentsForDeviceClassSubgroup(String groupId, String deviceClassId,
        RequestOptions requestOptions) {
        return this.serviceClient.listDeploymentsForDeviceClassSubgroupAsync(groupId, deviceClassId, requestOptions);
    }

    /**
     * Gets the deployment properties.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentForDeviceClassSubgroupWithResponse(String groupId,
        String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return this.serviceClient.getDeploymentForDeviceClassSubgroupWithResponseAsync(groupId, deviceClassId,
            deploymentId, requestOptions);
    }

    /**
     * Deletes a device class subgroup deployment.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId,
        String deploymentId, RequestOptions requestOptions) {
        return this.serviceClient.deleteDeploymentForDeviceClassSubgroupWithResponseAsync(groupId, deviceClassId,
            deploymentId, requestOptions);
    }

    /**
     * Stops a deployment.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deviceClass Subgroup Deployment metadata along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> stopDeploymentWithResponse(String groupId, String deviceClassId,
        String deploymentId, RequestOptions requestOptions) {
        return this.serviceClient.stopDeploymentWithResponseAsync(groupId, deviceClassId, deploymentId, requestOptions);
    }

    /**
     * Retries a deployment with failed devices.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deploymentId: String (Required)
     *     startDateTime: OffsetDateTime (Required)
     *     update (Required): {
     *         updateId (Required): {
     *             provider: String (Required)
     *             name: String (Required)
     *             version: String (Required)
     *         }
     *         description: String (Optional)
     *         friendlyName: String (Optional)
     *     }
     *     groupId: String (Required)
     *     deviceClassSubgroups (Optional): [
     *         String (Optional)
     *     ]
     *     isCanceled: Boolean (Optional)
     *     isRetried: Boolean (Optional)
     *     rollbackPolicy (Optional): {
     *         update (Required): (recursive schema, see update above)
     *         failure (Required): {
     *             devicesFailedPercentage: int (Required)
     *             devicesFailedCount: int (Required)
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deviceClass Subgroup Deployment metadata along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retryDeploymentWithResponse(String groupId, String deviceClassId,
        String deploymentId, RequestOptions requestOptions) {
        return this.serviceClient.retryDeploymentWithResponseAsync(groupId, deviceClassId, deploymentId,
            requestOptions);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groupId: String (Required)
     *     deviceClassId: String (Required)
     *     deploymentState: String(Active/Failed/Inactive/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     totalDevices: Integer (Optional)
     *     devicesInProgressCount: Integer (Optional)
     *     devicesCompletedFailedCount: Integer (Optional)
     *     devicesCompletedSucceededCount: Integer (Optional)
     *     devicesCanceledCount: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupDeploymentStatusWithResponse(String groupId,
        String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return this.serviceClient.getDeviceClassSubgroupDeploymentStatusWithResponseAsync(groupId, deviceClassId,
            deploymentId, requestOptions);
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for
     * getting a list of failed devices.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of deployment device states returned. You can filter on
     * deviceId and moduleId and/or deviceState.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     retryCount: int (Required)
     *     movedOnToNewDeployment: boolean (Required)
     *     deviceState: String(Succeeded/InProgress/Canceled/Failed) (Required)
     * }
     * }</pre>
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeviceStatesForDeviceClassSubgroupDeployment(String groupId, String deviceClassId,
        String deploymentId, RequestOptions requestOptions) {
        return this.serviceClient.listDeviceStatesForDeviceClassSubgroupDeploymentAsync(groupId, deviceClassId,
            deploymentId, requestOptions);
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of operations returned. Only one specific filter is supported: \"status eq 'NotStarted' or
     * status eq 'Running'\"</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>Specifies a non-negative integer n that limits the number of items returned
     * from a collection. The service returns the number of available items up to but
     * not greater than the specified value n.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     traceId: String (Optional)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     etag: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device import operations as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listOperationStatuses(RequestOptions requestOptions) {
        return this.serviceClient.listOperationStatusesAsync(requestOptions);
    }

    /**
     * Get all device diagnostics log collections.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all device diagnostics log collections as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listLogCollections(RequestOptions requestOptions) {
        return this.serviceClient.listLogCollectionsAsync(requestOptions);
    }

    /**
     * Get the device diagnostics log collection.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param operationId The log collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device diagnostics log collection along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLogCollectionWithResponse(String operationId, RequestOptions requestOptions) {
        return this.serviceClient.getLogCollectionWithResponseAsync(operationId, requestOptions);
    }

    /**
     * Start the device diagnostics log collection on specified devices.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     deviceList (Required): [
     *          (Required){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     * }
     * }</pre>
     * 
     * @param operationId The log collection id.
     * @param resource Log collection details.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return diagnostics request body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> startLogCollectionWithResponse(String operationId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.startLogCollectionWithResponseAsync(operationId, resource, requestOptions);
    }

    /**
     * Get log collection with detailed status.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     operationId: String (Optional)
     *     createdDateTime: String (Optional)
     *     lastActionDateTime: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Optional)
     *     deviceStatus (Optional): [
     *          (Optional){
     *             deviceId: String (Required)
     *             moduleId: String (Optional)
     *             status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *             resultCode: String (Optional)
     *             extendedResultCode: String (Optional)
     *             logLocation: String (Optional)
     *         }
     *     ]
     *     description: String (Optional)
     * }
     * }</pre>
     * 
     * @param operationId The log collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return log collection with detailed status along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLogCollectionDetailedStatusWithResponse(String operationId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLogCollectionDetailedStatusWithResponseAsync(operationId, requestOptions);
    }

    /**
     * Get list of device health.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Restricts the set of devices for which device health is returned. You can
     * filter on status, device id and module id.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deviceId: String (Required)
     *     moduleId: String (Optional)
     *     state: String(healthy/unhealthy) (Required)
     *     digitalTwinModelId: String (Optional)
     *     healthChecks (Required): [
     *          (Required){
     *             name: String (Optional)
     *             result: String(success/userError) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of device health as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listHealthOfDevices(RequestOptions requestOptions) {
        return this.serviceClient.listHealthOfDevicesAsync(requestOptions);
    }

    /**
     * Gets a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub.
     * 
     * @param filter Restricts the set of device classes returned. You can filter on friendly name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeviceClass> listDeviceClasses(String filter) {
        // Generated convenience method for listDeviceClasses
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listDeviceClasses(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DeviceClass>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DeviceClass.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all device classes (sets of devices compatible with the same
     * updates based on the model Id and compat properties reported in the Device
     * Update PnP interface in IoT Hub) for all devices connected to Device Update for
     * IoT Hub as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeviceClass> listDeviceClasses() {
        // Generated convenience method for listDeviceClasses
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listDeviceClasses(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DeviceClass>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DeviceClass.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets the properties of a device class.
     * 
     * @param deviceClassId The device class identifier. This is generated from the model Id and the compat
     * properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a device class on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeviceClass> getDeviceClass(String deviceClassId) {
        // Generated convenience method for getDeviceClassWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeviceClassWithResponse(deviceClassId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeviceClass.class));
    }

    /**
     * Deletes a device class. Device classes are created automatically when Device
     * Update-enabled devices are connected to the hub but are not automatically
     * cleaned up since they are referenced by DeviceClassSubgroups. If the user has
     * deleted all DeviceClassSubgroups for a device class they can also delete the
     * device class to remove the records from the system and to stop checking the
     * compatibility of this device class with new updates. If a device is ever
     * reconnected for this device class it will be re-created.
     * 
     * @param deviceClassId The device class identifier. This is generated from the model Id and the compat
     * properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDeviceClass(String deviceClassId) {
        // Generated convenience method for deleteDeviceClassWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteDeviceClassWithResponse(deviceClassId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Gets a list of installable updates for a device class.
     * 
     * @param deviceClassId Device class identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of installable updates for a device class as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<UpdateInfo> listInstallableUpdatesForDeviceClass(String deviceClassId) {
        // Generated convenience method for listInstallableUpdatesForDeviceClass
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listInstallableUpdatesForDeviceClass(deviceClassId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, UpdateInfo>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(UpdateInfo.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     * 
     * @param filter Restricts the set of devices returned. You can filter on GroupId,
     * DeviceClassId, or GroupId and DeploymentStatus. Use DeploymentStatus eq null to
     * query for devices with no deployment status (that have never been deployed to).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices connected to Device Update for IoT Hub as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Device> listDevices(String filter) {
        // Generated convenience method for listDevices
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listDevices(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Device>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Device.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices connected to Device Update for IoT Hub as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Device> listDevices() {
        // Generated convenience method for listDevices
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listDevices(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Device>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Device.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use
     * Operation-Location response header value to check for operation status.
     * 
     * @param importType The types of devices to import.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<DeviceOperation, DeviceOperation> beginImportDevices(ImportType importType) {
        // Generated convenience method for beginImportDevicesWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginImportDevicesWithModelAsync(BinaryData.fromObject(importType), requestOptions);
    }

    /**
     * Gets the device properties and latest deployment status for a device connected
     * to Device Update for IoT Hub.
     * 
     * @param deviceId Device identity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the device properties and latest deployment status for a device connected
     * to Device Update for IoT Hub on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Device> getDevice(String deviceId) {
        // Generated convenience method for getDeviceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeviceWithResponse(deviceId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Device.class));
    }

    /**
     * Gets the device module properties and latest deployment status for a device
     * module connected to Device Update for IoT Hub.
     * 
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param moduleId Device module identifier in Azure IoT Hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the device module properties and latest deployment status for a device
     * module connected to Device Update for IoT Hub on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Device> getDeviceModule(String deviceId, String moduleId) {
        // Generated convenience method for getDeviceModuleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeviceModuleWithResponse(deviceId, moduleId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Device.class));
    }

    /**
     * Gets the breakdown of how many devices are on their latest update, have new
     * updates available, or are in progress receiving new updates.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the breakdown of how many devices are on their latest update, have new
     * updates available, or are in progress receiving new updates on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdateCompliance> getUpdateCompliance() {
        // Generated convenience method for getUpdateComplianceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getUpdateComplianceWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(UpdateCompliance.class));
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     * 
     * @param orderBy Orders the set of groups returned. You can order by groupId, deviceCount,
     * createdDate, subgroupsWithNewUpdatesAvailableCount,
     * subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all device groups as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Group> listGroups(String orderBy) {
        // Generated convenience method for listGroups
        RequestOptions requestOptions = new RequestOptions();
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listGroups(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Group>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Group.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all device groups as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Group> listGroups() {
        // Generated convenience method for listGroups
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listGroups(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Group>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Group.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets the device group properties.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the device group properties on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Group> getGroup(String groupId) {
        // Generated convenience method for getGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getGroupWithResponse(groupId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Group.class));
    }

    /**
     * Deletes a device group. This group is automatically created when a Device
     * Update-enabled device is connected to the hub and reports its properties.
     * Groups, subgroups, and deployments are not automatically cleaned up but are
     * retained for history purposes. Users can call this method to delete a group if
     * they do not need to retain any of the history of the group and no longer need
     * it. If a device is ever connected again for this group after the group was
     * deleted it will be automatically re-created but there will be no history.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteGroup(String groupId) {
        // Generated convenience method for deleteGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteGroupWithResponse(groupId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get device group update compliance information such as how many devices are on
     * their latest update, how many need new updates, and how many are in progress on
     * receiving a new update.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return device group update compliance information such as how many devices are on
     * their latest update, how many need new updates, and how many are in progress on
     * receiving a new update on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdateCompliance> getUpdateComplianceForGroup(String groupId) {
        // Generated convenience method for getUpdateComplianceForGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getUpdateComplianceForGroupWithResponse(groupId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(UpdateCompliance.class));
    }

    /**
     * Get the best available updates for a device group and a count of how many
     * devices need each update.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the best available updates for a device group and a count of how many
     * devices need each update as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeviceClassSubgroupUpdatableDevices> listBestUpdatesForGroup(String groupId) {
        // Generated convenience method for listBestUpdatesForGroup
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listBestUpdatesForGroup(groupId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DeviceClassSubgroupUpdatableDevices>(
                pagedResponse.getRequest(), pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DeviceClassSubgroupUpdatableDevices.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of deployments for a device group.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param orderBy Orders the set of deployments returned. You can order by start date.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments for a device group as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Deployment> listDeploymentsForGroup(String groupId, String orderBy) {
        // Generated convenience method for listDeploymentsForGroup
        RequestOptions requestOptions = new RequestOptions();
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listDeploymentsForGroup(groupId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Deployment>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Deployment.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of deployments for a device group.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments for a device group as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Deployment> listDeploymentsForGroup(String groupId) {
        // Generated convenience method for listDeploymentsForGroup
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listDeploymentsForGroup(groupId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Deployment>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Deployment.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets the deployment properties.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment properties on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> getDeployment(String groupId, String deploymentId) {
        // Generated convenience method for getDeploymentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeploymentWithResponse(groupId, deploymentId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Deployment.class));
    }

    /**
     * Creates or updates a deployment.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId Deployment identifier.
     * @param resource Deployment details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> createOrUpdateDeployment(String groupId, String deploymentId, Deployment resource) {
        // Generated convenience method for createOrUpdateDeploymentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrUpdateDeploymentWithResponse(groupId, deploymentId, BinaryData.fromObject(resource),
            requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Deployment.class));
    }

    /**
     * Deletes a deployment.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDeployment(String groupId, String deploymentId) {
        // Generated convenience method for deleteDeploymentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteDeploymentWithResponse(groupId, deploymentId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeploymentStatus> getDeploymentStatus(String groupId, String deploymentId) {
        // Generated convenience method for getDeploymentStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeploymentStatusWithResponse(groupId, deploymentId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeploymentStatus.class));
    }

    /**
     * Get the device class subgroups for the group. A device class subgroup is the
     * set of devices within the group that share the same device class. All devices
     * within the same device class are compatible with the same updates.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param filter Restricts the set of device class subgroups returned. You can filter on compat
     * properties by name and value. (i.e. filter=compatProperties/propertyName1 eq 'value1'
     * and compatProperties/propertyName2 eq 'value2').
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the device class subgroups for the group as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeviceClassSubgroup> listDeviceClassSubgroupsForGroup(String groupId, String filter) {
        // Generated convenience method for listDeviceClassSubgroupsForGroup
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listDeviceClassSubgroupsForGroup(groupId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, DeviceClassSubgroup>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue().stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(DeviceClassSubgroup.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Get the device class subgroups for the group. A device class subgroup is the
     * set of devices within the group that share the same device class. All devices
     * within the same device class are compatible with the same updates.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the device class subgroups for the group as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeviceClassSubgroup> listDeviceClassSubgroupsForGroup(String groupId) {
        // Generated convenience method for listDeviceClassSubgroupsForGroup
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listDeviceClassSubgroupsForGroup(groupId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, DeviceClassSubgroup>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue().stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(DeviceClassSubgroup.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets device class subgroup details. A device class subgroup is the set of
     * devices within the group that share the same device class. All devices within
     * the same device class are compatible with the same updates.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return device class subgroup details on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeviceClassSubgroup> getDeviceClassSubgroup(String groupId, String deviceClassId) {
        // Generated convenience method for getDeviceClassSubgroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeviceClassSubgroupWithResponse(groupId, deviceClassId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeviceClassSubgroup.class));
    }

    /**
     * Deletes a device class subgroup. This subgroup is automatically created when a
     * Device Update-enabled device is connected to the hub and reports its
     * properties. Groups, subgroups, and deployments are not automatically cleaned up
     * but are retained for history purposes. Users can call this method to delete a
     * subgroup if they do not need to retain any of the history of the subgroup and
     * no longer need it. If a device is ever connected again for this subgroup after
     * the subgroup was deleted it will be automatically re-created but there will be
     * no history.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDeviceClassSubgroup(String groupId, String deviceClassId) {
        // Generated convenience method for deleteDeviceClassSubgroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteDeviceClassSubgroupWithResponse(groupId, deviceClassId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get device class subgroup update compliance information such as how many
     * devices are on their latest update, how many need new updates, and how many are
     * in progress on receiving a new update.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return device class subgroup update compliance information such as how many
     * devices are on their latest update, how many need new updates, and how many are
     * in progress on receiving a new update on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdateCompliance> getDeviceClassSubgroupUpdateCompliance(String groupId, String deviceClassId) {
        // Generated convenience method for getDeviceClassSubgroupUpdateComplianceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeviceClassSubgroupUpdateComplianceWithResponse(groupId, deviceClassId, requestOptions)
            .flatMap(FluxUtil::toMono).map(protocolMethodData -> protocolMethodData.toObject(UpdateCompliance.class));
    }

    /**
     * Get the best available update for a device class subgroup and a count of how
     * many devices need this update.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the best available update for a device class subgroup and a count of how
     * many devices need this update on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeviceClassSubgroupUpdatableDevices> getBestUpdatesForDeviceClassSubgroup(String groupId,
        String deviceClassId) {
        // Generated convenience method for getBestUpdatesForDeviceClassSubgroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getBestUpdatesForDeviceClassSubgroupWithResponse(groupId, deviceClassId, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeviceClassSubgroupUpdatableDevices.class));
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param orderBy Orders the set of deployments returned. You can order by start date.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments for a device class subgroup as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeviceClassSubgroupDeployment> listDeploymentsForDeviceClassSubgroup(String groupId,
        String deviceClassId, String orderBy) {
        // Generated convenience method for listDeploymentsForDeviceClassSubgroup
        RequestOptions requestOptions = new RequestOptions();
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse
            = listDeploymentsForDeviceClassSubgroup(groupId, deviceClassId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DeviceClassSubgroupDeployment>(
                pagedResponse.getRequest(), pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DeviceClassSubgroupDeployment.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments for a device class subgroup as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeviceClassSubgroupDeployment> listDeploymentsForDeviceClassSubgroup(String groupId,
        String deviceClassId) {
        // Generated convenience method for listDeploymentsForDeviceClassSubgroup
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse
            = listDeploymentsForDeviceClassSubgroup(groupId, deviceClassId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DeviceClassSubgroupDeployment>(
                pagedResponse.getRequest(), pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DeviceClassSubgroupDeployment.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets the deployment properties.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the deployment properties on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeviceClassSubgroupDeployment> getDeploymentForDeviceClassSubgroup(String groupId, String deviceClassId,
        String deploymentId) {
        // Generated convenience method for getDeploymentForDeviceClassSubgroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeploymentForDeviceClassSubgroupWithResponse(groupId, deviceClassId, deploymentId, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeviceClassSubgroupDeployment.class));
    }

    /**
     * Deletes a device class subgroup deployment.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDeploymentForDeviceClassSubgroup(String groupId, String deviceClassId,
        String deploymentId) {
        // Generated convenience method for deleteDeploymentForDeviceClassSubgroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteDeploymentForDeviceClassSubgroupWithResponse(groupId, deviceClassId, deploymentId, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Stops a deployment.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deviceClass Subgroup Deployment metadata on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeviceClassSubgroupDeployment> stopDeployment(String groupId, String deviceClassId,
        String deploymentId) {
        // Generated convenience method for stopDeploymentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return stopDeploymentWithResponse(groupId, deviceClassId, deploymentId, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeviceClassSubgroupDeployment.class));
    }

    /**
     * Retries a deployment with failed devices.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deviceClass Subgroup Deployment metadata on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeviceClassSubgroupDeployment> retryDeployment(String groupId, String deviceClassId,
        String deploymentId) {
        // Generated convenience method for retryDeploymentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retryDeploymentWithResponse(groupId, deviceClassId, deploymentId, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeviceClassSubgroupDeployment.class));
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in
     * the deployment are in progress, completed, or failed on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeviceClassSubgroupDeploymentStatus> getDeviceClassSubgroupDeploymentStatus(String groupId,
        String deviceClassId, String deploymentId) {
        // Generated convenience method for getDeviceClassSubgroupDeploymentStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeviceClassSubgroupDeploymentStatusWithResponse(groupId, deviceClassId, deploymentId, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeviceClassSubgroupDeploymentStatus.class));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for
     * getting a list of failed devices.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @param filter Restricts the set of deployment device states returned. You can filter on
     * deviceId and moduleId and/or deviceState.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeploymentDeviceState> listDeviceStatesForDeviceClassSubgroupDeployment(String groupId,
        String deviceClassId, String deploymentId, String filter) {
        // Generated convenience method for listDeviceStatesForDeviceClassSubgroupDeployment
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse
            = listDeviceStatesForDeviceClassSubgroupDeployment(groupId, deviceClassId, deploymentId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, DeploymentDeviceState>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue().stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(DeploymentDeviceState.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for
     * getting a list of failed devices.
     * 
     * @param groupId Group identity. This is created from the value of the ADUGroup tag in the Iot
     * Hub's device/module twin or $default for devices with no tag.
     * @param deviceClassId Device class subgroup identity. This is generated from the model Id and the
     * compat properties reported by the device update agent in the Device Update PnP
     * interface in IoT Hub. It is a hex-encoded SHA1 hash.
     * @param deploymentId The caller-provided deployment identifier. This cannot be longer than 73
     * characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
     * '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
     * in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     * create a deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeploymentDeviceState> listDeviceStatesForDeviceClassSubgroupDeployment(String groupId,
        String deviceClassId, String deploymentId) {
        // Generated convenience method for listDeviceStatesForDeviceClassSubgroupDeployment
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse
            = listDeviceStatesForDeviceClassSubgroupDeployment(groupId, deviceClassId, deploymentId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, DeploymentDeviceState>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue().stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(DeploymentDeviceState.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     * 
     * @param filter Restricts the set of operations returned. Only one specific filter is supported: \"status eq
     * 'NotStarted' or status eq 'Running'\".
     * @param top Specifies a non-negative integer n that limits the number of items returned
     * from a collection. The service returns the number of available items up to but
     * not greater than the specified value n.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all device import operations as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeviceOperation> listOperationStatuses(String filter, Integer top) {
        // Generated convenience method for listOperationStatuses
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listOperationStatuses(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DeviceOperation>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DeviceOperation.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all device import operations as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeviceOperation> listOperationStatuses() {
        // Generated convenience method for listOperationStatuses
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listOperationStatuses(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DeviceOperation>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DeviceOperation.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Get all device diagnostics log collections.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all device diagnostics log collections as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<LogCollection> listLogCollections() {
        // Generated convenience method for listLogCollections
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listLogCollections(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, LogCollection>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(LogCollection.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Get the device diagnostics log collection.
     * 
     * @param operationId The log collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the device diagnostics log collection on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LogCollection> getLogCollection(String operationId) {
        // Generated convenience method for getLogCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLogCollectionWithResponse(operationId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LogCollection.class));
    }

    /**
     * Start the device diagnostics log collection on specified devices.
     * 
     * @param operationId The log collection id.
     * @param resource Log collection details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostics request body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LogCollection> startLogCollection(String operationId, LogCollection resource) {
        // Generated convenience method for startLogCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return startLogCollectionWithResponse(operationId, BinaryData.fromObject(resource), requestOptions)
            .flatMap(FluxUtil::toMono).map(protocolMethodData -> protocolMethodData.toObject(LogCollection.class));
    }

    /**
     * Get log collection with detailed status.
     * 
     * @param operationId The log collection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return log collection with detailed status on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LogCollectionOperationDetailedStatus> getLogCollectionDetailedStatus(String operationId) {
        // Generated convenience method for getLogCollectionDetailedStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLogCollectionDetailedStatusWithResponse(operationId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LogCollectionOperationDetailedStatus.class));
    }

    /**
     * Get list of device health.
     * 
     * @param filter Restricts the set of devices for which device health is returned. You can
     * filter on status, device id and module id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of device health as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeviceHealth> listHealthOfDevices(String filter) {
        // Generated convenience method for listHealthOfDevices
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listHealthOfDevices(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DeviceHealth>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DeviceHealth.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Get list of device health.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of device health as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeviceHealth> listHealthOfDevices() {
        // Generated convenience method for listHealthOfDevices
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listHealthOfDevices(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, DeviceHealth>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(DeviceHealth.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }
}
