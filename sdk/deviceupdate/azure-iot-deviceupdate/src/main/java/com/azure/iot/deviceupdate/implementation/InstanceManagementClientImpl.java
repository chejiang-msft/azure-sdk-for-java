// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.iot.deviceupdate.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.iot.deviceupdate.DeviceUpdateServiceVersion;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the InstanceManagementClient type.
 */
public final class InstanceManagementClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final InstanceManagementClientService service;

    /**
     * The Device Update for IoT Hub account endpoint (hostname only, no protocol).
     */
    private final String endpoint;

    /**
     * Gets The Device Update for IoT Hub account endpoint (hostname only, no protocol).
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The Device Update for IoT Hub account instance identifier.
     */
    private final String instanceId;

    /**
     * Gets The Device Update for IoT Hub account instance identifier.
     * 
     * @return the instanceId value.
     */
    public String getInstanceId() {
        return this.instanceId;
    }

    /**
     * Service version.
     */
    private final DeviceUpdateServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public DeviceUpdateServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of InstanceManagementClient client.
     * 
     * @param endpoint The Device Update for IoT Hub account endpoint (hostname only, no protocol).
     * @param instanceId The Device Update for IoT Hub account instance identifier.
     * @param serviceVersion Service version.
     */
    public InstanceManagementClientImpl(String endpoint, String instanceId, DeviceUpdateServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, instanceId, serviceVersion);
    }

    /**
     * Initializes an instance of InstanceManagementClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint The Device Update for IoT Hub account endpoint (hostname only, no protocol).
     * @param instanceId The Device Update for IoT Hub account instance identifier.
     * @param serviceVersion Service version.
     */
    public InstanceManagementClientImpl(HttpPipeline httpPipeline, String endpoint, String instanceId,
        DeviceUpdateServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, instanceId, serviceVersion);
    }

    /**
     * Initializes an instance of InstanceManagementClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint The Device Update for IoT Hub account endpoint (hostname only, no protocol).
     * @param instanceId The Device Update for IoT Hub account instance identifier.
     * @param serviceVersion Service version.
     */
    public InstanceManagementClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        String instanceId, DeviceUpdateServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.instanceId = instanceId;
        this.serviceVersion = serviceVersion;
        this.service
            = RestProxy.create(InstanceManagementClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for InstanceManagementClient to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://{endpoint}/deviceUpdate/{instanceId}")
    @ServiceInterface(name = "InstanceManagementCl")
    public interface InstanceManagementClientService {
        @Get("/limits")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLimits(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/limits")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLimitsSync(@HostParam("endpoint") String endpoint,
            @HostParam("instanceId") String instanceId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Gets the instance limits for active deployments, devices, device classes, and
     * groups.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     counters (Required): {
     *         deviceCount (Required): {
     *             usage: int (Required)
     *             quota: int (Required)
     *         }
     *         deviceClassCount (Required): (recursive schema, see deviceClassCount above)
     *         deviceGroupCount (Required): (recursive schema, see deviceGroupCount above)
     *         activeDeploymentCount (Required): (recursive schema, see activeDeploymentCount above)
     *         deploymentCount (Required): (recursive schema, see deploymentCount above)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the instance limits for active deployments, devices, device classes, and
     * groups along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLimitsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getLimits(this.getEndpoint(), this.getInstanceId(),
            this.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Gets the instance limits for active deployments, devices, device classes, and
     * groups.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     counters (Required): {
     *         deviceCount (Required): {
     *             usage: int (Required)
     *             quota: int (Required)
     *         }
     *         deviceClassCount (Required): (recursive schema, see deviceClassCount above)
     *         deviceGroupCount (Required): (recursive schema, see deviceGroupCount above)
     *         activeDeploymentCount (Required): (recursive schema, see activeDeploymentCount above)
     *         deploymentCount (Required): (recursive schema, see deploymentCount above)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the instance limits for active deployments, devices, device classes, and
     * groups along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLimitsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLimitsSync(this.getEndpoint(), this.getInstanceId(), this.getServiceVersion().getVersion(),
            accept, requestOptions, Context.NONE);
    }
}
